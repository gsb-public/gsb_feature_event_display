<?php
/**
 * @file
 * Code for the GSB Feature Event Display feature.
 */

include_once 'gsb_feature_event_display.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function gsb_feature_event_display_ctools_plugin_directory($module, $plugin) {
 if ($module == 'ctools' && !empty($plugin)) {
   return "plugins/$plugin";
 }
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 *
 * Provides customizations to the views content type settings form
 */
function gsb_feature_event_display_form_views_content_views_panes_content_type_edit_form_alter(&$form, &$form_state, $form_id) {
  // Remove the default value for upcoming events.
  if (in_array($form_state['subtype_name'], array('gsb_event-upcoming_events'))) {
    $view_modes = $form['view_mode']['#options'];
    foreach($view_modes as $key=>$value) {
      if($key !== 'compact' AND $key !== 'expanded'){
        unset($form['view_mode']['#options'][$key]);
      }
    }
    $conf = $form_state['conf'];
    $form['exposed']['arguments']['#weight'] = 90;
    $item['title_link'] = array(
      '#title' => t('URL'),
      '#type' => 'textfield',
      '#weight' => -99,
      '#default_value' => !empty($conf['title_link']) ? $conf['title_link'] : '',
    );
    $form['override_title']['#weight'] = -99;
    $form['items_per_page']['#weight'] = -98;
    $form['view_mode']['#weight'] = -98;
    $form['exposed']['#weight'] = -97;
    $form = gsb_misc_fixes_associative_insert($form, 'override_title_text', $item);
    $form['comments']['#access'] = FALSE;
    $form['links']['#access'] = FALSE;
    $form['#submit'][] = 'gsb_feature_event_display_form_submit';
  }

  if (isset($form["display_settings"])) {
    if (isset($form["display_settings"]["view_settings"])) {
      $form["display_settings"]["view_settings"]['#access'] = FALSE;
    }
    if (isset($form["display_settings"]["header_type"])) {
      $form["display_settings"]["header_type"]['#access'] = FALSE;
    }
  }
  if (isset($form["content_settings"])) {
    $form["content_settings"]['#access'] = FALSE;
  }
}

/**
 * Submit handler for views_content_views_panes_content_type_edit_form.
 *  - Save title link field in pane config.
 */
function gsb_feature_event_display_form_submit($form, &$form_state) {
  $form_state['conf']['title_link'] = $form_state['values']['title_link'];
}

/**
 * Implements hook_panels_pane_content_alter().
 *  - Alter Event Filters content pane title to be linked to a custom URL.
 */
function gsb_feature_event_display_panels_pane_content_alter($content, $pane, $args, $context) {
  if ($content && $content->subtype == 'gsb_event-upcoming_events') {
    if (!empty($pane->configuration['title_link'])) {
      $url_parts = drupal_parse_url($pane->configuration['title_link']);
      // Don't sanitize the title. It will get sanitized later.
      $url_parts['html'] = TRUE;
      $content->title = l($content->title, $url_parts['path'], $url_parts);
    }
  }
}

/**
 * Implementation of hook_module_implements_alter()
 */
function gsb_feature_event_display_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['gsb_feature_event_display'])) {
      $group = $implementations['gsb_feature_event_display'];
      unset($implementations['gsb_feature_event_display']);
      $implementations['gsb_feature_event_display'] = $group;
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_event_display_field_extra_fields() {
  $extra = array();
  // Add an extra field for iCal links.
  $extra['node']['event']['display']['gsb_feature_event_display_ical'] = array(
    'label' => t('iCal URL'),
    'description' => t('A link to an iCal event'),
    'weight' => 0,
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_feature_event_display_node_view($node, $view_mode, $langcode) {
  // Only process events.
  if ($node->type != 'event') {
    return;
  }

  // hide time zone and find local time for all day
  if (_gsb_feature_event_display_check_date_all_day($node->field_event_date)) {
    $node->content['field_time_zone']['#access'] = FALSE;
    $node->content['find_local_time']['#access'] = FALSE;
  }

  // Add a link for the iCal event.
  $node->content['gsb_feature_event_display_ical'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'event-ical-link',
      ),
    ),
    'link' => array(
      '#type' => 'link',
      '#title' => t('Add to My Calendar'),
      '#href' => 'events/ical/' . $node->nid . '/event.ics',
      '#attributes' => array(
        'class' => array(
          'green-rounded-button',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for node.tpl.php.
 */
function gsb_feature_event_display_preprocess_node(&$variables) {
  // Give the event listing the same class as teaser to trick the CSS.
  if ($variables['type'] == 'event' && $variables['view_mode'] == 'event_listing') {
    $variables['classes_array'][] = 'view-mode-teaser';
  }
}



function gsb_feature_event_display_gsb_fpp_customizations_icons_alter(&$icons) {
  $module_path = drupal_get_path('module', 'gsb_feature_event_display');
  $icons_settings = array(
    'views_panes:gsb_event-upcoming_events' => 'upcoming-events.png',
    'views_panes:gsb_event-event_calendar_pane' => 'GSB_event_calendar.png',
    'views_panes:gsb_event-event_listing_pane' => 'GSB_event_listing.png',
    'views_panes:gsb_event-frontpage' => 'GSB_event_frontpage.png',
  );
  foreach($icons_settings as $key => $value) {
    if (isset($icons[$key]['icon'])) {
      $icons[$key]['icon'] = $module_path . '/images/' . $value;
    }
  }
}

/**
 * Used for grouping the events in main list (includes converting db date to local timezone)
 */
function gsb_feature_event_display_format_date($raw_value, $object) {

  $date = new DateObject($raw_value, 'UTC', DATE_FORMAT_DATETIME);
  date_timezone_set($date, timezone_open('America/Los_Angeles'));

  $raw_value = date_format_date($date, 'custom', DATE_FORMAT_DATETIME);

  $date = date('l, F j, Y', strtotime($raw_value));
  return $date;
}

/**
 * Check date all day
 */
function _gsb_feature_event_display_check_date_all_day($date_field) {
  $start_date = date_create($date_field['und'][0]['value']);
  $hour = date_format($start_date, 'H') . ' hours';
  //date_sub($start_date, date_interval_create_from_date_string('7 hours'));
  date_sub($start_date, date_interval_create_from_date_string($hour));
  $end_date = date_create($date_field['und'][0]['value2']);
  //date_sub($end_date, date_interval_create_from_date_string('7 hours'));
  date_sub($end_date, date_interval_create_from_date_string($hour));

  // hide time zone and find local time for all day
  return date_is_all_day(date_format($start_date, 'Y-m-d H:i:s'), date_format($end_date, 'Y-m-d H:i:s'));
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form.
 */
function gsb_feature_event_display_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'gsb_event' && $form_state['view']->current_display == 'main_event_list_pane') {
    $form['#action'] = '';
    $form['secondary']['done'] = array(
      '#type' => 'submit',
      '#value' => t('Done'),
    );
    $form['secondary']['clear-all'] = array(
      '#type' => 'button',
      '#value' => t('Clear All'),
    );
  }
}

function gsb_feature_event_display_panels_pane_prerender($pane) {
  if ($pane->subtype == 'gsb_event-frontpage') {
    $pane->configuration['path'] = 'events';
  }
}

//altering main event list to display multi-day events multiple times

function gsb_feature_event_display_views_pre_render($view){
  if ($view->name == 'gsb_event' && $view->current_display == 'main_event_list_pane') {

    $today = new DateTime();

    foreach($view->result AS $k => $result) {

      $start_date = new DateTime($result->field_data_field_event_date_field_event_date_value);

      if ($start_date < $today) {
        $result->field_data_field_event_date_field_event_date_value = date_format($today,"Y/m/d H:i:s");
      }
    }
  }
}
